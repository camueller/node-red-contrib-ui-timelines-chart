[
    {
        "id": "a139a777.1c72f8",
        "type": "inject",
        "z": "299de46f.fed57c",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "c453449a.2a34a8"
            ]
        ]
    },
    {
        "id": "c453449a.2a34a8",
        "type": "template",
        "z": "299de46f.fed57c",
        "name": "timelines-chart-1",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "[\n      {\n          \"group\": \"\",\n          \"data\": [\n              {\n                  \"label\": \"\",\n                  \"data\": [\n                      {\n                          \"timeRange\": [\n                              \"2020-12-31T08:00:00+09:00\",\n                              \"2020-12-31T09:10:00+09:00\"\n                          ],\n                          \"val\": \"1\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2020-12-31T09:10:00+09:00\",\n                              \"2020-12-31T12:00:00+09:00\"\n                          ],\n                          \"val\": \"2\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2020-12-31T12:00:00+09:00\",\n                              \"2020-12-31T12:10:00+09:00\"\n                          ],\n                          \"val\": \"3\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2020-12-31T12:10:00+09:00\",\n                              \"2020-12-31T12:20:00+09:00\"\n                          ],\n                          \"val\": \"4\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2020-12-31T12:20:00+09:00\",\n                              \"2020-12-31T12:30:00+09:00\"\n                          ],\n                          \"val\": \"5\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2020-12-31T12:30:00+09:00\",\n                              \"2020-12-31T22:00:00+09:00\"\n                          ],\n                          \"val\": \"6\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:00:00+09:00\",\n                              \"2021-01-01T00:10:00+09:00\"\n                          ],\n                          \"val\": \"1\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:10:00+09:00\",\n                              \"2021-01-01T00:20:00+09:00\"\n                          ],\n                          \"val\": \"2\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:20:00+09:00\",\n                              \"2021-01-01T00:40:00+09:00\"\n                          ],\n                          \"val\": \"3\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:40:00+09:00\",\n                              \"2021-01-01T00:40:01+09:00\"\n                          ],\n                          \"val\": \"4\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:40:01+09:00\",\n                              \"2021-01-01T00:40:02+09:00\"\n                          ],\n                          \"val\": \"5\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:40:02+09:00\",\n                              \"2021-01-01T00:40:03+09:00\"\n                          ],\n                          \"val\": \"6\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:40:04+09:00\",\n                              \"2021-01-01T00:40:05+09:00\"\n                          ],\n                          \"val\": \"7\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:40:05+09:00\",\n                              \"2021-01-01T00:40:10+09:00\"\n                          ],\n                          \"val\": \"8\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:40:10+09:00\",\n                              \"2021-01-01T00:40:15+09:00\"\n                          ],\n                          \"val\": \"9\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:40:15+09:00\",\n                              \"2021-01-01T00:40:30+09:00\"\n                          ],\n                          \"val\": \"10\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T00:40:30+09:00\",\n                              \"2021-01-01T01:00:00+09:00\"\n                          ],\n                          \"val\": \"11\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T01:00:00+09:00\",\n                              \"2021-01-01T01:10:00+09:00\"\n                          ],\n                          \"val\": \"12\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T01:10:00+09:00\",\n                              \"2021-01-01T01:30:00+09:00\"\n                          ],\n                          \"val\": \"13\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T01:30:00+09:00\",\n                              \"2021-01-01T02:00:00+09:00\"\n                          ],\n                          \"val\": \"14\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T02:00:00+09:00\",\n                              \"2021-01-01T03:00:00+09:00\"\n                          ],\n                          \"val\": \"15\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T03:00:00+09:00\",\n                              \"2021-01-01T04:00:00+09:00\"\n                          ],\n                          \"val\": \"16\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T04:00:00+09:00\",\n                              \"2021-01-01T05:00:00+09:00\"\n                          ],\n                          \"val\": \"17\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T05:00:00+09:00\",\n                              \"2021-01-01T06:00:00+09:00\"\n                          ],\n                          \"val\": \"18\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T06:00:00+09:00\",\n                              \"2021-01-01T07:00:00+09:00\"\n                          ],\n                          \"val\": \"19\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T07:00:00+09:00\",\n                              \"2021-01-01T08:00:00+09:00\"\n                          ],\n                          \"val\": \"20\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T08:00:00+09:00\",\n                              \"2021-01-01T09:00:00+09:00\"\n                          ],\n                          \"val\": \"21\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T09:00:00+09:00\",\n                              \"2021-01-01T10:00:00+09:00\"\n                          ],\n                          \"val\": \"22\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T10:00:00+09:00\",\n                              \"2021-01-01T11:00:00+09:00\"\n                          ],\n                          \"val\": \"15\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T11:00:00+09:00\",\n                              \"2021-01-01T12:00:00+09:00\"\n                          ],\n                          \"val\": \"16\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T12:00:00+09:00\",\n                              \"2021-01-01T13:00:00+09:00\"\n                          ],\n                          \"val\": \"17\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T13:00:00+09:00\",\n                              \"2021-01-01T14:00:00+09:00\"\n                          ],\n                          \"val\": \"18\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T14:00:00+09:00\",\n                              \"2021-01-01T15:00:00+09:00\"\n                          ],\n                          \"val\": \"19\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T15:00:00+09:00\",\n                              \"2021-01-01T16:00:00+09:00\"\n                          ],\n                          \"val\": \"20\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T17:00:00+09:00\",\n                              \"2021-01-01T18:00:00+09:00\"\n                          ],\n                          \"val\": \"21\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T19:00:00+09:00\",\n                              \"2021-01-01T20:00:00+09:00\"\n                          ],\n                          \"val\": \"22\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T20:00:00+09:00\",\n                              \"2021-01-01T21:00:00+09:00\"\n                          ],\n                          \"val\": \"23\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T22:00:00+09:00\",\n                              \"2021-01-01T22:10:00+09:00\"\n                          ],\n                          \"val\": \"24\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T22:10:00+09:00\",\n                              \"2021-01-01T22:20:00+09:00\"\n                          ],\n                          \"val\": \"25\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T22:20:00+09:00\",\n                              \"2021-01-01T22:30:00+09:00\"\n                          ],\n                          \"val\": \"26\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T22:30:00+09:00\",\n                              \"2021-01-01T22:31:00+09:00\"\n                          ],\n                          \"val\": \"27\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T22:31:00+09:00\",\n                              \"2021-01-01T22:35:00+09:00\"\n                          ],\n                          \"val\": \"28\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T22:35:00+09:00\",\n                              \"2021-01-01T22:40:00+09:00\"\n                          ],\n                          \"val\": \"29\"\n                      },\n                      {\n                          \"timeRange\": [\n                              \"2021-01-01T22:40:00+09:00\",\n                              \"2021-01-02T23:59:59+09:00\"\n                          ],\n                          \"val\": \"30\"\n                      }\n                  ]\n              }\n          ]\n      }\n    ]",
        "output": "json",
        "x": 290,
        "y": 180,
        "wires": [
            [
                "28d3369c.4afcaa"
            ]
        ]
    },
    {
        "id": "28d3369c.4afcaa",
        "type": "ui_timelines_chart",
        "z": "299de46f.fed57c",
        "group": "ead3fc9.832a3",
        "name": "timelines-chart-1",
        "order": 2,
        "label": "timelines-chart-1",
        "width": "0",
        "height": "0",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "graphColors": [
            {
                "statusColor": "#000000",
                "statusValue": "1"
            },
            {
                "statusColor": "#ffee00",
                "statusValue": "2"
            },
            {
                "statusColor": "#1100ff",
                "statusValue": "3"
            },
            {
                "statusColor": "#00bfff",
                "statusValue": "4"
            },
            {
                "statusColor": "#00ff62",
                "statusValue": "5"
            },
            {
                "statusColor": "#ff0000",
                "statusValue": "6"
            },
            {
                "statusColor": "#ee7272",
                "statusValue": "7"
            },
            {
                "statusColor": "#00bfff",
                "statusValue": "8"
            },
            {
                "statusColor": "#ffa200",
                "statusValue": "9"
            },
            {
                "statusColor": "#8000ff",
                "statusValue": "10"
            }
        ],
        "xTickFormat": "HH:mm",
        "startDateTime": "2020-12-31T00:00",
        "endDateTime": "",
        "maxLineHeight": "60",
        "xAxisLabelsFontSize": "16",
        "xAxisLabelslColor": "#ffffff",
        "yAxisLabelsFontSize": "16",
        "yAxisLabelslColor": "#ffffff",
        "resetZoomLabelFontSize": "24",
        "resetZoomLabelColor": "#00ff2a",
        "enableAnimations": true,
        "enableDateMarker": false,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "b123d4bb.967e08"
            ]
        ]
    },
    {
        "id": "b123d4bb.967e08",
        "type": "debug",
        "z": "299de46f.fed57c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "acf55e6a.5eebd",
        "type": "inject",
        "z": "299de46f.fed57c",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "cec323ebfe42f717"
            ]
        ]
    },
    {
        "id": "7f5e9c62.03fd64",
        "type": "ui_timelines_chart",
        "z": "299de46f.fed57c",
        "group": "b34577b7.7dc8e8",
        "name": "timelines-chart-2",
        "order": 0,
        "label": "timelines-chart-2",
        "width": "15",
        "height": "8",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "graphColors": [
            {
                "statusColor": "#000000",
                "statusValue": "false"
            },
            {
                "statusColor": "#ff0000",
                "statusValue": "true"
            },
            {
                "statusColor": "#ffee00",
                "statusValue": "ERROR1"
            },
            {
                "statusColor": "#1100ff",
                "statusValue": "ERROR2"
            },
            {
                "statusColor": "#00bfff",
                "statusValue": "ERROR3"
            },
            {
                "statusColor": "#00ff62",
                "statusValue": "ERROR4"
            },
            {
                "statusColor": "#04227c",
                "statusValue": "ERROR6"
            },
            {
                "statusColor": "#d576c5",
                "statusValue": "ERROR7"
            }
        ],
        "xTickFormat": "HH:mm",
        "startDateTime": "",
        "endDateTime": "",
        "maxLineHeight": "60",
        "xAxisLabelsFontSize": "12",
        "xAxisLabelslColor": "#ffc800",
        "yAxisLabelsFontSize": "14",
        "yAxisLabelslColor": "#b750dc",
        "resetZoomLabelFontSize": "14",
        "resetZoomLabelColor": "#ffffff",
        "enableAnimations": true,
        "enableDateMarker": true,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "4c554da1.775324"
            ]
        ]
    },
    {
        "id": "4c554da1.775324",
        "type": "debug",
        "z": "299de46f.fed57c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 260,
        "wires": []
    },
    {
        "id": "28e6ce38.b125f2",
        "type": "inject",
        "z": "299de46f.fed57c",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "4b4b8bc35b733b9d"
            ]
        ]
    },
    {
        "id": "d6480b66.212d38",
        "type": "debug",
        "z": "299de46f.fed57c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 340,
        "wires": []
    },
    {
        "id": "349a939e.2441fc",
        "type": "ui_timelines_chart",
        "z": "299de46f.fed57c",
        "group": "b34577b7.7dc8e8",
        "name": "timelines-chart-3",
        "order": 0,
        "label": "timelines-chart-3",
        "width": "15",
        "height": "8",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "graphColors": [
            {
                "statusColor": "#ffc800",
                "statusValue": "error1"
            },
            {
                "statusColor": "#d400ff",
                "statusValue": "error2"
            },
            {
                "statusColor": "#ff0000",
                "statusValue": "error3"
            },
            {
                "statusColor": "#1eff00",
                "statusValue": "error4"
            }
        ],
        "xTickFormat": "HH:mm",
        "startDateTime": "",
        "endDateTime": "",
        "maxLineHeight": "20",
        "xAxisLabelsFontSize": "12",
        "xAxisLabelslColor": "#ffffff",
        "yAxisLabelsFontSize": "12",
        "yAxisLabelslColor": "#ffffff",
        "resetZoomLabelFontSize": "14",
        "resetZoomLabelColor": "#ffffff",
        "enableAnimations": false,
        "enableDateMarker": false,
        "x": 490,
        "y": 340,
        "wires": [
            [
                "d6480b66.212d38"
            ]
        ]
    },
    {
        "id": "bff180da7ef4c770",
        "type": "function",
        "z": "299de46f.fed57c",
        "name": "getRandomData",
        "func": "function getRandomData(ordinal = false) {\n\n  const NGROUPS = 3,\n    MAXLINES = 5,\n    MAXSEGMENTS = 10,\n    MAXCATEGORIES = 10,\n    MINTIME = new Date(2018,1,1);\n\n  const nCategories = Math.ceil(Math.random()*MAXCATEGORIES),\n    categoryLabels = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n\n  return [...Array(NGROUPS).keys()].map(i => ({\n    group: 'group' + (i+1),\n    data: getGroupData()\n  }));\n\n  function getGroupData() {\n\n    return [...Array(Math.ceil(Math.random()*MAXLINES)).keys()].map(i => ({\n      label: 'label' + (i+1),\n      data: getSegmentsData()\n    }));\n\n    //\n\n    function getSegmentsData() {\n      const nSegments = Math.ceil(Math.random()*MAXSEGMENTS),\n        segMaxLength = Math.round(((new Date())-MINTIME)/nSegments);\n      let runLength = MINTIME;\n\n      return [...Array(nSegments).keys()].map(i => {\n        const tDivide = [Math.random(), Math.random()].sort(),\n          start = new Date(runLength.getTime() + tDivide[0]*segMaxLength),\n          end = new Date(runLength.getTime() + tDivide[1]*segMaxLength);\n\n        runLength = new Date(runLength.getTime() + segMaxLength);\n\n        return {\n          timeRange: [start, end],\n          val: ordinal ? categoryLabels[Math.ceil(Math.random()*nCategories)] : Math.random()\n          //labelVal: is optional - only displayed in the labels\n        };\n      });\n\n    }\n  }\n}\n\nmsg.payload = getRandomData(true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "9ca8de59a4d3c560"
            ]
        ]
    },
    {
        "id": "36a1bb954d1be862",
        "type": "inject",
        "z": "299de46f.fed57c",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "bff180da7ef4c770"
            ]
        ]
    },
    {
        "id": "7d8a882c438c1cb9",
        "type": "debug",
        "z": "299de46f.fed57c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 100,
        "wires": []
    },
    {
        "id": "9ca8de59a4d3c560",
        "type": "ui_timelines_chart",
        "z": "299de46f.fed57c",
        "group": "ead3fc9.832a3",
        "name": "timelines-chart-0",
        "order": 1,
        "label": "timelines-chart-0",
        "width": "0",
        "height": "0",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "graphColors": [
            {
                "statusColor": "#000000",
                "statusValue": "A"
            },
            {
                "statusColor": "#ffee00",
                "statusValue": "B"
            },
            {
                "statusColor": "#1100ff",
                "statusValue": "C"
            },
            {
                "statusColor": "#00bfff",
                "statusValue": "D"
            },
            {
                "statusColor": "#00ff62",
                "statusValue": "E"
            },
            {
                "statusColor": "#ff0000",
                "statusValue": "F"
            },
            {
                "statusColor": "#ee7272",
                "statusValue": "G"
            },
            {
                "statusColor": "#00bfff",
                "statusValue": "H"
            },
            {
                "statusColor": "#ffa200",
                "statusValue": "I"
            },
            {
                "statusColor": "#8000ff",
                "statusValue": "J"
            },
            {
                "statusColor": "#000000",
                "statusValue": "K"
            },
            {
                "statusColor": "#317881",
                "statusValue": "L"
            },
            {
                "statusColor": "#dc6f6f",
                "statusValue": "M"
            },
            {
                "statusColor": "#007bff",
                "statusValue": "N"
            },
            {
                "statusColor": "#ff941a",
                "statusValue": "O"
            },
            {
                "statusColor": "#fbec23",
                "statusValue": "P"
            },
            {
                "statusColor": "#be28dc",
                "statusValue": "Q"
            },
            {
                "statusColor": "#47bac2",
                "statusValue": "R"
            },
            {
                "statusColor": "#c53030",
                "statusValue": "S"
            },
            {
                "statusColor": "#00ffbf",
                "statusValue": "T"
            },
            {
                "statusColor": "#313bbf",
                "statusValue": "U"
            },
            {
                "statusColor": "#00ff33",
                "statusValue": "V"
            },
            {
                "statusColor": "#47bd8a",
                "statusValue": "W"
            },
            {
                "statusColor": "#efff0a",
                "statusValue": "X"
            },
            {
                "statusColor": "#ff0000",
                "statusValue": "Y"
            },
            {
                "statusColor": "#ff00a2",
                "statusValue": "Z"
            }
        ],
        "xTickFormat": "MM-DD",
        "startDateTime": "",
        "endDateTime": "",
        "maxLineHeight": "20",
        "xAxisLabelsFontSize": "16",
        "xAxisLabelslColor": "#ffffff",
        "yAxisLabelsFontSize": "12",
        "yAxisLabelslColor": "#ffffff",
        "resetZoomLabelFontSize": "24",
        "resetZoomLabelColor": "#fbff00",
        "enableAnimations": true,
        "enableDateMarker": false,
        "x": 490,
        "y": 100,
        "wires": [
            [
                "7d8a882c438c1cb9"
            ]
        ]
    },
    {
        "id": "ad848f5f31111f27",
        "type": "inject",
        "z": "299de46f.fed57c",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payloadType": "date",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "bff180da7ef4c770",
                "c453449a.2a34a8",
                "cec323ebfe42f717",
                "4b4b8bc35b733b9d"
            ]
        ]
    },
    {
        "id": "cec323ebfe42f717",
        "type": "function",
        "z": "299de46f.fed57c",
        "name": "getRandomData",
        "func": "function getRandomData(ordinal = false) {\n\n  const _d = new Date();\n\n  const NGROUPS = 1,\n    MAXLINES = 1,\n    MAXSEGMENTS = 9,\n    MAXCATEGORIES = 9,\n    MINTIME = new Date(_d.getFullYear(), _d.getMonth(), _d.getDate(), 0, 0, 0);\n\n  const nCategories = Math.ceil(Math.random()*MAXCATEGORIES),\n    categoryLabels = ['true','false','ERROR1','ERROR2','ERROR3','ERROR4','ERROR5','ERROR6','ERROR7'];\n\n  return [...Array(NGROUPS).keys()].map(i => ({\n    group: 'group' + (i+1),\n    data: getGroupData()\n  }));\n\n  function getGroupData() {\n\n    return [...Array(Math.ceil(Math.random()*MAXLINES)).keys()].map(i => ({\n      label: 'label' + (i+1),\n      data: getSegmentsData()\n    }));\n\n    //\n\n    function getSegmentsData() {\n      const nSegments = Math.ceil(Math.random()*MAXSEGMENTS),\n        segMaxLength = Math.round(((new Date())-MINTIME)/nSegments);\n      let runLength = MINTIME;\n\n      return [...Array(nSegments).keys()].map(i => {\n        const tDivide = [Math.random(), Math.random()].sort(),\n          start = new Date(runLength.getTime() + tDivide[0]*segMaxLength),\n          end = new Date(runLength.getTime() + tDivide[1]*segMaxLength);\n\n        runLength = new Date(runLength.getTime() + segMaxLength);\n\n        return {\n          timeRange: [start, end],\n          val: ordinal ? categoryLabels[Math.ceil(Math.random()*nCategories)] : Math.random()\n          //labelVal: is optional - only displayed in the labels\n        };\n      });\n\n    }\n  }\n}\n\nmsg.payload = getRandomData(true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "7f5e9c62.03fd64"
            ]
        ]
    },
    {
        "id": "4b4b8bc35b733b9d",
        "type": "function",
        "z": "299de46f.fed57c",
        "name": "getRandomData",
        "func": "function getRandomData(ordinal = false) {\n\n  const _d = new Date();\n\n  const NGROUPS = 2,\n    MAXLINES = 2,\n    MAXSEGMENTS = 4,\n    MAXCATEGORIES = 4,\n    MINTIME = new Date(_d.getFullYear(), _d.getMonth(), _d.getDate(), 0, 0, 0);\n\n  const nCategories = Math.ceil(Math.random()*MAXCATEGORIES),\n    categoryLabels = ['error1','error2','error3','error4'];\n\n  return [...Array(NGROUPS).keys()].map(i => ({\n    group: 'machine' + (i+1),\n    data: getGroupData()\n  }));\n\n  function getGroupData() {\n\n    return [...Array(Math.ceil(Math.random()*MAXLINES)).keys()].map(i => ({\n      label: 'label' + (i+1),\n      data: getSegmentsData()\n    }));\n\n    //\n\n    function getSegmentsData() {\n      const nSegments = Math.ceil(Math.random()*MAXSEGMENTS),\n        segMaxLength = Math.round(((new Date())-MINTIME)/nSegments);\n      let runLength = MINTIME;\n\n      return [...Array(nSegments).keys()].map(i => {\n        const tDivide = [Math.random(), Math.random()].sort(),\n          start = new Date(runLength.getTime() + tDivide[0]*segMaxLength),\n          end = new Date(runLength.getTime() + tDivide[1]*segMaxLength);\n\n        runLength = new Date(runLength.getTime() + segMaxLength);\n\n        return {\n          timeRange: [start, end],\n          val: ordinal ? categoryLabels[Math.ceil(Math.random()*nCategories)] : Math.random()\n          //labelVal: is optional - only displayed in the labels\n        };\n      });\n\n    }\n  }\n}\n\nmsg.payload = getRandomData(true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 340,
        "wires": [
            [
                "349a939e.2441fc"
            ]
        ]
    },
    {
        "id": "ead3fc9.832a3",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "35250d78.e38892",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false
    },
    {
        "id": "b34577b7.7dc8e8",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "35250d78.e38892",
        "order": 2,
        "disp": false,
        "width": "30",
        "collapse": false
    },
    {
        "id": "35250d78.e38892",
        "type": "ui_tab",
        "name": "HOME",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]